// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from janus-client.djinni

package com.github.helloiampau.janus.generated;

import android.util.Log;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Janus {
    private static String TAG = "Janus java_native_janus_log";
    public abstract void init();

    public abstract void close();

    public abstract void hangup();

    public abstract void dispatch(String command, Bundle payload);

    public static Janus create(JanusConf conf, Platform platform, ProtocolDelegate delegate)
    {
        Log.d(TAG, "create");
        return CppProxy.create(conf,
                               platform,
                               delegate);
    }

    private static final class CppProxy extends Janus
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void init()
        {
            Log.d(TAG, "init");
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_init(this.nativeRef);
            Log.d(TAG, "init ok");
        }
        private native void native_init(long _nativeRef);

        @Override
        public void close()
        {
            Log.d(TAG, "close");
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_close(this.nativeRef);
        }
        private native void native_close(long _nativeRef);

        @Override
        public void hangup()
        {
            Log.d(TAG, "hangup");
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_hangup(this.nativeRef);
        }
        private native void native_hangup(long _nativeRef);

        @Override
        public void dispatch(String command, Bundle payload)
        {
            Log.d(TAG, "dispatch");
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_dispatch(this.nativeRef, command, payload);
        }
        private native void native_dispatch(long _nativeRef, String command, Bundle payload);

        public static native Janus create(JanusConf conf, Platform platform, ProtocolDelegate delegate);
    }
}
