// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from janus-client.djinni

#include "native_protocol_delegate.hpp"  // my header
#include "Marshal.hpp"
#include "native_bundle.hpp"
#include "native_janus_error.hpp"
#include "native_janus_event.hpp"
#include "native_log.hpp"

namespace djinni_generated {

NativeProtocolDelegate::NativeProtocolDelegate() : ::djinni::JniInterface<::Janus::ProtocolDelegate, NativeProtocolDelegate>("com/github/helloiampau/janus/generated/ProtocolDelegate$CppProxy") {}

NativeProtocolDelegate::~NativeProtocolDelegate() = default;

NativeProtocolDelegate::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeProtocolDelegate::JavaProxy::~JavaProxy() = default;

void NativeProtocolDelegate::JavaProxy::onReady() {
    JANUS_LOGD("NativeProtocolDelegate::JavaProxy::onReady");
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeProtocolDelegate>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onReady);
    ::djinni::jniExceptionCheck(jniEnv);
    JANUS_LOGD("NativeProtocolDelegate::JavaProxy::onReady end");
}
void NativeProtocolDelegate::JavaProxy::onClose() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeProtocolDelegate>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onClose);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeProtocolDelegate::JavaProxy::onError(const ::Janus::JanusError & c_error, const std::shared_ptr<::Janus::Bundle> & c_context) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeProtocolDelegate>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onError,
                           ::djinni::get(::djinni_generated::NativeJanusError::fromCpp(jniEnv, c_error)),
                           ::djinni::get(::djinni_generated::NativeBundle::fromCpp(jniEnv, c_context)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeProtocolDelegate::JavaProxy::onEvent(const std::shared_ptr<::Janus::JanusEvent> & c_event, const std::shared_ptr<::Janus::Bundle> & c_context) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeProtocolDelegate>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onEvent,
                           ::djinni::get(::djinni_generated::NativeJanusEvent::fromCpp(jniEnv, c_event)),
                           ::djinni::get(::djinni_generated::NativeBundle::fromCpp(jniEnv, c_context)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeProtocolDelegate::JavaProxy::onHangup(const std::string & c_reason) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeProtocolDelegate>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onHangup,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_reason)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_com_github_helloiampau_janus_generated_ProtocolDelegate_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::Janus::ProtocolDelegate>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_github_helloiampau_janus_generated_ProtocolDelegate_00024CppProxy_native_1onReady(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::ProtocolDelegate>(nativeRef);
        ref->onReady();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_github_helloiampau_janus_generated_ProtocolDelegate_00024CppProxy_native_1onClose(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::ProtocolDelegate>(nativeRef);
        ref->onClose();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_github_helloiampau_janus_generated_ProtocolDelegate_00024CppProxy_native_1onError(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_error, jobject j_context)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::ProtocolDelegate>(nativeRef);
        ref->onError(::djinni_generated::NativeJanusError::toCpp(jniEnv, j_error),
                     ::djinni_generated::NativeBundle::toCpp(jniEnv, j_context));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_github_helloiampau_janus_generated_ProtocolDelegate_00024CppProxy_native_1onEvent(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_event, jobject j_context)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::ProtocolDelegate>(nativeRef);
        ref->onEvent(::djinni_generated::NativeJanusEvent::toCpp(jniEnv, j_event),
                     ::djinni_generated::NativeBundle::toCpp(jniEnv, j_context));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_github_helloiampau_janus_generated_ProtocolDelegate_00024CppProxy_native_1onHangup(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_reason)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Janus::ProtocolDelegate>(nativeRef);
        ref->onHangup(::djinni::String::toCpp(jniEnv, j_reason));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
